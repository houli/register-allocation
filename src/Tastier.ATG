COMPILER Tastier

/*-------------------------------------------------------------------------------------------*/

int labelSeed = 0;
string genLabel() {
    return $"$L{labelSeed++}";
}

int temporarySeed = 0;
string genTemp() {
    return $"$T{temporarySeed++}";
}



   const int // object kinds
      var = 0, proc = 1;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;
   public System.Collections.Generic.List<IRTuple> program;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out IROperation op>
=                        (. op = IROperation.ADD; .)
  ( '+'
  | '-'                  (. op = IROperation.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out string temp,        // load value of Expr into register
     out int type>       (. int typeR; string tempR; IROperation op; .)
  = SimExpr<out temp,
            out type>
  [ RelOp<out op>
    SimExpr<out tempR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               program.Add(new IRTupleRelOp(op, temp, tempR));
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out string temp, // load Primary into register
        out int type>    (. Obj obj; string name; .)
=                        (.
                            type = undef;
                            temp = genTemp();
                         .)
  ( Ident<out name>      (.
                            obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var) {
                               if (obj.level == 0)
                                  program.Add(new IRTupleLoadStore(IROperation.LOAD, temp, name, obj.adr, -1));
                               else
                                  program.Add(new IRTupleLoadStore(IROperation.LOAD, temp, name, obj.adr, tab.curLevel - obj.level));
                               if (type == boolean)
                                  // reset Z flag in CPSR
                                  program.Add(new IRTuple(IROperation.ZATTACK));
                            }
                            else SemErr("variable expected");
                         .)

  | number               (.
                            type = integer;
                            program.Add(new IRTupleMove(IROperation.LOADC, t.val, temp));
                         .)

  | '-'
    Primary<out temp,
            out type>     (.
                            if (type == integer) {
                               program.Add(new IRTupleMove(IROperation.NEG, temp, temp));
                            } else {
                               SemErr("integer type expected");
                            }
                         .)

  | "true"               (.
                               type = boolean;
                               program.Add(new IRTupleMove(IROperation.LOADC, "1", temp));
                               program.Add(new IRTuple(IROperation.ZATTACK));
                         .)

  | "false"              (.
                               type = boolean;
                               program.Add(new IRTupleMove(IROperation.LOADC, "0", temp));
                               program.Add(new IRTuple(IROperation.ZATTACK));
                         .)

  | '('
    Expr<out temp,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out IROperation op>
=                        (. op = IROperation.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = IROperation.DIV; .)
  | ("mod" | "MOD")      (. op = IROperation.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     {
     VarDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main") {
                               program.Add(new IRTupleLabel(IROperation.LABEL, "MainBody"));
                            } else {
                               program.Add(new IRTupleLabel(IROperation.LABEL, $"{procName}Body"));
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               program.Add(new IRTuple(IROperation.END));
                            } else {
                               program.Add(new IRTuple(IROperation.RET));
                               program.Add(new IRTupleEnter(procName, tab.curLevel, tab.topScope.nextAdr));
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out IROperation op>
=                        (. op = IROperation.EQU; .)
  ( "="
  | '<'                  (. op = IROperation.LSS; .)
  | '>'                  (. op = IROperation.GTR; .)
  | "!="                 (. op = IROperation.NEQ; .)
  | "<="                 (. op = IROperation.LEQ; .)
  | ">="                 (. op = IROperation.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out string temp, //load value of SimExpr into register
        out int type>    (. int typeR; string tempR; IROperation op; .)
= Term<out temp,
       out type>
  { AddOp<out op>
    Term<out tempR,
         out typeR>      (.
                            if (type == integer && typeR == integer) {
                               program.Add(new IRTupleBinOp(op, temp, tempR));
                            } else {
                               SemErr("integer type expected");
                            }
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; string temp; .)
= Ident<out name>        (. obj = tab.Find(name); .)
  ( ":="                 (.
                            if (obj.kind != var)
                               SemErr("cannot assign to procedure");
                         .)
    Expr<out temp,
         out type> ';'   (.
                            if (type == obj.type) {
                               if (obj.level == 0) {
                                  program.Add(new IRTupleLoadStore(IROperation.STORE, temp, name, obj.adr, -1));
                               } else {
                                  program.Add(new IRTupleLoadStore(IROperation.STORE, temp, name, obj.adr, tab.curLevel - obj.level));
                               }
                            }
                         .)
  | '(' ')' ';'          (.
                            if (obj.kind == proc) {
                               program.Add(new IRTupleLabel(IROperation.CALL, name));
                            } else {
                               SemErr("object is not a procedure");
                            }
                         .)
  )

| "if"                   (. string l1, l2; l1 = ""; .)
  Expr<out temp,
       out type>         (.
                            if (type == boolean) {
                               l1 = genLabel();
                               program.Add(new IRTupleLabel(IROperation.BFALSE, l1));
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = genLabel();
                            program.Add(new IRTupleLabel(IROperation.BRANCH, l2));
                            program.Add(new IRTupleLabel(IROperation.LABEL, l1));
                         .)
      [ "else"
      Stat
      ]               	 (.
                            program.Add(new IRTupleLabel(IROperation.LABEL, l2));
                         .)

| "while"                (.
                            string l1, l2;
                            l1 = genLabel();
                            program.Add(new IRTupleLabel(IROperation.LABEL, l1));
                            l2 = "";
                         .)
  Expr<out temp,
       out type>         (.
                            if (type == boolean) {
                               l2 = genLabel();
                               program.Add(new IRTupleLabel(IROperation.BFALSE, l2));
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            program.Add(new IRTupleLabel(IROperation.BRANCH, l1));
                            program.Add(new IRTupleLabel(IROperation.LABEL, l2));
                         .)

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               program.Add(new IRTuple(IROperation.READ));
                               if (obj.level == 0) {
                                  program.Add(new IRTupleLoadStore(IROperation.STORE, "$R0", name, obj.adr, -1));
                               } else {
                                  program.Add(new IRTupleLoadStore(IROperation.STORE, "$R0", name, obj.adr, tab.curLevel - obj.level));
                               }
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out temp,
         out type>       (.
                            switch (type) {
                               case integer:
                                 program.Add(new IRTupleWriteLocation(IROperation.WRITEINT, temp));
                                 break;
                               case boolean:
                                 program.Add(new IRTuple(IROperation.WRITEBOOL));
                                 break;
                            }
                         .)
  | String<out text>     (.
                            program.Add(new IRTupleWriteLiteral(IROperation.WRITE, text.Replace("\"", "")));
                         .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out temp,
       out type>           (.
                              switch (type) {
                                 case integer:
                                   program.Add(new IRTupleWriteLocation(IROperation.WRITELNINT, temp));
                                   break;
                                 case boolean:
                                   program.Add(new IRTuple(IROperation.WRITELNBOOL));
                                   break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl }
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { VarDecl }          // global variables
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out string temp,    // load value of Term into register
     out int type>       (. int typeR; string tempR; IROperation op; .)
  = Primary<out temp,
            out type>
  { MulOp<out op>
    Primary<out tempR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               program.Add(new IRTupleBinOp(op, temp, tempR));
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; .)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type); .)
  } ";"
.

END Tastier.
